expression		: print expression
				| return expression
				| let IDENTIFIER assign expression
				| func IDENTIFIER LBRACKET RBRACKET scope
				| comp-expr


comp-expr		: arith-expr ((EQUALS|NEQUALS|LESSER|GREATER|LEQUALS|GEQUALS) arith-expr)*


arith-expr		: term ((PLUS|MINUS) term)*


term			: factor ((MULT|DIV) factor)*


factor			: (PLUS|MINUS) factor
				| power

				
power			: atom (POW factor)*


atom			: INT|FLOAT
				| STRING
				| IDENTIFIER
					| IDENTIFIER LBRACKET RBRACKET
				| true|false
				| if expression then scope
				| LBRACKET expression RBRACKET
				| scope
				| ARRAY_BEGIN (expression, COMMA)* ARRAY_END : (ARRAY_BEGIN INT ARRAY_END)?


scope			: SCOPE_BEGIN (expression EOS|expression)* SCOPE_END